import numpyro
from skbase.testing.test_all_objects import BaseFixtureGenerator, QuickTester

from prophetverse.engine import BaseInferenceEngine


def _model(obs):

    mean = numpyro.sample("mean", numpyro.distributions.Normal(0, 1))
    return numpyro.sample("y", numpyro.distributions.Normal(mean, 1), obs=obs)


class InferenceEngineFixtureGenerator(BaseFixtureGenerator):
    object_type_filter = BaseInferenceEngine
    exclude_objects = ["InferenceEngine"]
    package_name = "prophetverse.engine"

    def _generate_object_instance(self, test_name, **kwargs):
        """Return object instance fixtures.

        Fixtures parametrized
        ---------------------
        object_instance: instance of object inheriting from BaseObject
            ranges over all object classes not excluded by self.excluded_tests
            instances are generated by create_test_instance class method
        """
        # call _generate_object_class to get all the classes
        object_classes_to_test, _ = self._generate_object_class(test_name=test_name)

        # create instances from the classes
        object_instances_to_test = []
        object_instance_names = []
        # retrieve all object parameters if multiple, construct instances
        for est in object_classes_to_test:
            all_instances_of_est, instance_names = est.create_test_instances_and_names()
            all_instances_of_est = [
                e.set_params(model=_model) for e in all_instances_of_est
            ]
            object_instances_to_test += all_instances_of_est
            object_instance_names += instance_names

        return object_instances_to_test, object_instance_names


class TestAllInferenceEngines(InferenceEngineFixtureGenerator, QuickTester):

    def test_inference_converges(self, object_instance):
        import jax.numpy as jnp
        import numpy as np

        obs = jnp.array(np.random.normal(0, 1, 100))
        object_instance.infer(obs=obs)

        assert isinstance(object_instance.posterior_samples_, dict)
        assert "mean" in object_instance.posterior_samples_
        assert jnp.isfinite(object_instance.posterior_samples_["mean"].mean().item())
