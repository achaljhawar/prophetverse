name: Pre-Release Workflow

on:
  push:
    branches:
      - develop

jobs:
  pre-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          show-progress: true
          fetch-depth: 100


      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Bump pre-release version and tag
        run: |
          CURRENT_VERSION=$(poetry version --short)
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          # Check if the latest tag matches the current version and increment if needed
          if [[ "$LATEST_TAG" == "$CURRENT_VERSION"* ]]; then
            BUILD_NUMBER=$(echo $LATEST_TAG | grep -oP '\d+$')  # assuming the tag ends with a number
            BUILD_NUMBER=$((BUILD_NUMBER + 1))
            NEW_VERSION="${CURRENT_VERSION}-rc${BUILD_NUMBER}"
          else
            NEW_VERSION="${CURRENT_VERSION}-rc1"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          git tag v$NEW_VERSION
          poetry version $NEW_VERSION

      - name: Build and publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry version ${{ env.VERSION }}
          poetry build
          poetry publish --skip-existing

      - name: Create GitHub Pre-Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: v${{ env.NEW_VERSION }}
          draft: false
          prerelease: true
